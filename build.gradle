buildscript {
    repositories {
        maven { url 'https://repo.grails.org/grails/core' }
        maven { url "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
    }
}

version "$version"
group 'io.github.matrei'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

bootJar.enabled = false
jar {
    enabled = true
    classifier = ''
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'io.micronaut:micronaut-inject-groovy'
    console 'org.grails:grails-console'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.grails:grails-core'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.grails:grails-web-boot'
    implementation 'org.grails:grails-logging'
    implementation 'org.grails:grails-plugin-rest'
    implementation 'org.grails:grails-plugin-databinding'
    implementation 'org.grails:grails-plugin-i18n'
    implementation 'org.grails:grails-plugin-services'
    implementation 'org.grails:grails-plugin-url-mappings'
    implementation 'org.grails:grails-plugin-interceptors'
    implementation 'org.grails.plugins:cache'
    implementation 'org.grails.plugins:async'
    implementation 'org.grails.plugins:scaffolding'
    implementation 'org.grails.plugins:gsp'
    profile 'org.grails.profiles:web-plugin'
    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation 'org.grails:grails-gorm-testing-support'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.grails:grails-web-testing-support'

}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'grails-inertia-plugin'
            version = project.version

            artifact jar
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Grails Adapter for Inertia.js'
                description = 'Grails plugin with server-side adapter for Inertia.js'
                url = 'https://github.com/matrei/grails-inertia-plugin'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'matrei'
                        name = 'Mattias Reichel'
                        email = 'mattias.reichel@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/matrei/grails-inertia-plugin.git'
                    developerConnection = 'scm:git:ssh://github.com:matrei/grails-inertia-plugin.git'
                    url = 'https://github.com/matrei/grails-inertia-plugin'
                }
            }
        }
    }
}

ext."signing.keyId" = project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.findProperty('signing.secretKeyRingFile') ?: (System.getenv('GITHUB_WORKSPACE') ? "${System.getenv('GITHUB_WORKSPACE')}/secring.gpg" : "${System.getProperty('user.home')}/.gnupg/secring.gpg")

ext.isReleaseVersion = !project.version.endsWith('-SNAPSHOT')

afterEvaluate {
    signing {
        required { isReleaseVersion }
        sign publishing.publications.maven
    }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.findProperty('sonatypeOssUsername') ?: ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.findProperty("sonatypeOssPassword") ?: ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.findProperty("sonatypeOssStagingProfileIdInertia") ?: ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

task snapshotVersion {
    doLast {
        if (!project.version.endsWith('-SNAPSHOT')) {
            ant.propertyfile(file: 'gradle.properties') {
                entry(key: 'version', value: "${project.version}-SNAPSHOT")
            }
        }
    }
}