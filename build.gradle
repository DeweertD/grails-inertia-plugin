import grails.views.gradle.json.JsonViewCompilerTask

plugins {

    id 'eclipse'
    id 'idea'

    id 'groovy'
    id 'java-library'

    id 'org.grails.grails-web'
    id 'org.grails.plugins.views-json'
    id 'org.grails.grails-plugin'

    id 'io.github.gradle-nexus.publish-plugin'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.matrei'

repositories {
    mavenCentral()
    maven { url 'https://repo.grails.org/grails/core' }
}

dependencies {

    implementation 'org.grails:grails-logging'
    implementation 'org.grails:grails-plugin-interceptors'
    implementation 'org.grails.plugins:gsp'
    implementation 'org.grails.plugins:views-json'

    compileOnly 'io.micronaut:micronaut-inject-groovy'

    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation 'org.grails:grails-web-testing-support'

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of 11
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

tasks.named('compileTestGroovy').configure {
    dependsOn 'compileGsonViews'
}

tasks.named('compileGsonViews', JsonViewCompilerTask) {
    // This is needed for the gson view to be resolved from plugin
    packageName = 'inertia'
}
tasks.withType(Groovydoc).configureEach {
    dependsOn 'compileGsonViews'
}

tasks.named('bootJar') {
    enabled = false
}
tasks.named('jar', Jar) {
    enabled = true
    archiveClassifier = ''
}

ext.pomInfo = {
    delegate.name 'Grails Adapter for Inertia.js'
    delegate.description 'Grails plugin with server-side adapter for Inertia.js'
    delegate.url 'https://github.com/matrei/grails-inertia-plugin'
    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache License, Version 2.0'
            delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    delegate.developers {
        delegate.developer {
            delegate.id 'matrei'
            delegate.name 'Mattias Reichel'
            delegate.email 'mattias.reichel@gmail.com'
        }
    }
    delegate.scm {
        delegate.connection 'scm:git:git://github.com/matrei/grails-inertia-plugin.git'
        delegate.developerConnection 'scm:git:ssh://github.com:matrei/grails-inertia-plugin.git'
        delegate.url 'https://github.com/matrei/grails-inertia-plugin'
    }
}

publishing {
    publications {
        maven(MavenPublication) {

            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom.withXml {
                def xml = asNode()
                xml.children().last() + pomInfo
                // dependency management shouldn't be included
                def n = xml.get('dependencyManagement')
                if (n) xml.remove(n)
            }
        }
    }
}

ext.set 'signing.keyId', project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY')
ext.set 'signing.password', project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE')
ext.set 'signing.secretKeyRingFile', project.findProperty('signing.secretKeyRingFile') ?: (System.getenv('GITHUB_WORKSPACE') ? "${System.getenv('GITHUB_WORKSPACE')}/secring.gpg" : "${System.getProperty('user.home')}/.gnupg/secring.gpg")

ext.set 'isReleaseVersion', !version.toString().endsWith('-SNAPSHOT')

afterEvaluate {
    signing {
        required { isReleaseVersion }
        sign publishing.publications.maven
    }
}
//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
    shouldRunAfter tasks.withType(Sign)
}

if (isReleaseVersion && project.hasProperty('release')) {
    nexusPublishing {
        String sonatypeUsername = System.getenv('SONATYPE_USERNAME') ?: project.findProperty('sonatypeOssUsername') ?: ''
        String sonatypePassword = System.getenv('SONATYPE_PASSWORD') ?: project.findProperty('sonatypeOssPassword') ?: ''
        String sonatypeStagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID') ?: project.findProperty('sonatypeOssStagingProfileId') ?: ''
        repositories {
            sonatype {
                nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
                snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
                username = sonatypeUsername
                password = sonatypePassword
                stagingProfileId = sonatypeStagingProfileId
            }
        }
        transitionCheckOptions {
            maxRetries = 100
            delayBetween = java.time.Duration.ofSeconds(5)
        }
    }
}