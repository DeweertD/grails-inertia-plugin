buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2" }
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
        classpath "org.grails.plugins:views-gradle:2.3.2"
    }
}

group 'io.github.matrei'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'org.grails.plugins.views-json'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = JavaVersion.toVersion 8
targetCompatibility = JavaVersion.toVersion 8

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

// Upgrading snakeyaml to 1.33 from 1.30 to get rid of some CVEs
ext['snakeyaml.version'] = '1.33'

dependencies {
    compileOnly 'io.micronaut:micronaut-inject-groovy'
    implementation 'org.grails:grails-logging'
    implementation 'org.grails:grails-plugin-interceptors'
    implementation 'org.grails.plugins:gsp'
    implementation 'org.grails.plugins:views-json'
    profile 'org.grails.profiles:web-plugin'
    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation 'org.grails:grails-web-testing-support'
}

tasks.withType(GroovyCompile).configureEach {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

compileGsonViews {
    // This is needed for the gson view to be resolved from plugin
    packageName = 'inertia'
}
tasks.withType(Groovydoc).configureEach {
    dependsOn compileGsonViews
}

bootJar.enabled = false
jar {
    enabled = true
    archiveClassifier.set('')
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        maven(MavenPublication) {

            from components.java

            // The generateMetadataFileForMavenPublication fails without the following versionMapping block
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Grails Adapter for Inertia.js'
                description = 'Grails plugin with server-side adapter for Inertia.js'
                url = 'https://github.com/matrei/grails-inertia-plugin'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'matrei'
                        name = 'Mattias Reichel'
                        email = 'mattias.reichel@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/matrei/grails-inertia-plugin.git'
                    developerConnection = 'scm:git:ssh://github.com:matrei/grails-inertia-plugin.git'
                    url = 'https://github.com/matrei/grails-inertia-plugin'
                }
            }
        }
    }
}

ext."signing.keyId" = project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY')
ext."signing.password" = project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.findProperty('signing.secretKeyRingFile') ?: (System.getenv('GITHUB_WORKSPACE') ? "${System.getenv('GITHUB_WORKSPACE')}/secring.gpg" : "${System.getProperty('user.home')}/.gnupg/secring.gpg")

ext.isReleaseVersion = !version.endsWith('-SNAPSHOT')

afterEvaluate {
    signing {
        required { isReleaseVersion }
        sign publishing.publications.maven
    }
}

if(project.hasProperty('release')) {
    apply plugin: 'io.github.gradle-nexus.publish-plugin'
    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv('SONATYPE_USERNAME') ?: project.findProperty('sonatypeOssUsername') ?: ''
                def ossPass = System.getenv('SONATYPE_PASSWORD') ?: project.findProperty('sonatypeOssPassword') ?: ''
                def ossStagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID') ?: project.findProperty('sonatypeOssStagingProfileIdInertia') ?: ''
                nexusUrl = uri 'https://s01.oss.sonatype.org/service/local/'
                snapshotRepositoryUrl = uri 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}

tasks.register('snapshotVersion') {
    doLast {
        if (isReleaseVersion) {
            ant.propertyfile(file: 'gradle.properties') {
                entry(key: 'version', value: "${project.version}-SNAPSHOT")
            }
        }
    }
}