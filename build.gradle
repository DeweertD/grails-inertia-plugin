import grails.views.gradle.json.JsonViewCompilerTask
import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository
import java.time.Duration

plugins {
    id 'groovy'
    id 'java-library'

    id 'org.grails.grails-gsp'
    id 'org.grails.grails-web'
    id 'org.grails.plugins.views-json'
    id 'org.grails.grails-plugin'

    id 'io.github.gradle-nexus.publish-plugin'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.matrei'

repositories {
    mavenCentral()
    maven { url = 'https://repo.grails.org/grails/core' }
}

dependencies {

    implementation 'org.grails:grails-plugin-interceptors'
    implementation 'org.grails.plugins:views-json'

    runtimeOnly 'org.grails.plugins:gsp'

    compileOnly 'io.micronaut:micronaut-inject-groovy'
    compileOnly libs.slf4j.nop // Get rid of warning about missing slf4j implementation during compileGsonViews task

    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation 'org.grails:grails-web-testing-support'

    testRuntimeOnly libs.slf4j.nop // Get rid of warning about missing slf4j implementation during test task
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging { events 'passed', 'skipped', 'failed', 'standardOut', 'standardError' }
    reports.html.required = false
    reports.junitXml.required = false
}

tasks.named('compileTestGroovy') {
    dependsOn 'compileGsonViews'
}

tasks.named('compileGsonViews', JsonViewCompilerTask) {
    packageName = 'inertia' // This is needed for the gson view to be resolved from plugin
}
tasks.withType(Groovydoc).configureEach {
    dependsOn 'compileGsonViews'
}

tasks.named('bootJar') {
    enabled = false // Plugins should not create a bootJar
}
tasks.named('jar', Jar) {
    enabled = true // Enable the jar task again, as the bootJar task has been disabled
    archiveClassifier = '' // Remove '-plain' suffix from jar file name
}

def javaComponent = components.named('java')
publishing {
    publications {
        register('inertiaPlugin', MavenPublication) {
            from javaComponent.get()
            versionMapping {
                usage('java-api') { fromResolutionOf('runtimeClasspath') }
                usage('java-runtime') { fromResolutionResult() }
            }
            pom {
                name = 'Grails Adapter for Inertia.js'
                description = 'Grails plugin with server-side adapter for Inertia.js'
                url = 'https://github.com/matrei/grails-inertia-plugin'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'matrei'
                        name = 'Mattias Reichel'
                        email = 'mattias.reichel@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/matrei/grails-inertia-plugin.git'
                    developerConnection = 'scm:git:ssh://github.com:matrei/grails-inertia-plugin.git'
                    url = 'https://github.com/matrei/grails-inertia-plugin'
                }
            }
            // dependency management shouldn't be included
            pom.withXml {
                def root = it.asElement()
                root.getElementsByTagName('dependencyManagement').each { root.removeChild(it) }
            }
        }
    }
}

ext.set('signing.keyId', System.getenv('SIGNING_KEY'))
ext.set('signing.password', System.getenv('SIGNING_PASSPHRASE'))
ext.set('isReleaseVersion', !version.toString().endsWith('-SNAPSHOT'))

def mavenPublication = publishing.publications.named('inertiaPlugin')
afterEvaluate {
    signing {
        required = { isReleaseVersion }
        sign mavenPublication.get()
    }
}

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(InitializeNexusStagingRepository).configureEach {
    shouldRunAfter = tasks.withType(Sign)
}

if (isReleaseVersion && project.hasProperty('release')) {
    nexusPublishing {
        String sonatypeUsername = project.findProperty('sonatypeOssUsername') ?: ''
        String sonatypePassword = project.findProperty('sonatypeOssPassword') ?: ''
        String sonatypeStagingProfileId = project.findProperty('sonatypeOssStagingProfileId') ?: ''
        repositories {
            sonatype {
                nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
                snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
                username = sonatypeUsername
                password = sonatypePassword
                stagingProfileId = sonatypeStagingProfileId
            }
        }
        transitionCheckOptions {
            maxRetries = 100 // Default 60
            delayBetween = Duration.ofSeconds(5) // Default 10
        }
    }
}